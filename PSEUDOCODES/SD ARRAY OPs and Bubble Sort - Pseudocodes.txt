//ARRAY MANIPULATION

//DECLARATION OF SD ARRAY
DECLARE myARR : ARRAY [1:5] OF INTEGER

DIM i, j, X : INTEGER
DIM isFound, alreadySorted : BOOLEAN
isFound = FALSE
alreadySorted = TRUE
 
//INITIALISATION OF SD ARRAY
FOR i = 1 to 5
    myARR[i] = 0
NEXT i

//POPULATION OF SD ARRAY
FOR i = 1 to 5
    INPUT "INPUT A NUMBER TO INSERT INTO ARRAY: ", X
    myARR[i] = X
END FOR

//LINEAR SEARCH - SEARCHING AN ARRAY
INPUT "INPUT A NUMBER TO SEARCH FOR IN ARRAY: ", X
FOR i = 1 TO 5
    IF myARR[i] = X
      THEN
        isFound = TRUE
        EXIT FOR
    ENDIF
END FOR

IF isFound = FALSE
  THEN
    OUTPUT X, " is not found."
  ELSE
    OUTPUT X, " is found at location ", i
ENDIF

//BUBBLE SORT - SORTING AN ARRAY IN ASCENDING ORDER
FOR j = 1 to 5
   FOR i = 1 to 4
     IF myARR[i] > myARR[i+1]
       THEN
         X = myARR[i]
         myARR[i] = myARR[i+1]
         myARR[i+1] = X
     END IF
   END FOR //i
END FOR

//BUBBLE SORT (ROBUST CODE) - SORTING AN ARRAY IN ASCENDING ORDER
FOR j = 4 TO 1 Step -1
   alreadySorted = TRUE
   FOR i = 1 to J
     IF myARR[i] > myARR[i+1]
       THEN
         X = myARR[i]
         myARR[i] = myARR[i+1]
         myARR[i+1] = X
         alreadySorted = FALSE
     END IF
   END FOR //i
   IF alreadySorted = TRUE THEN EXIT FOR
END FOR
 
//BUBBLE SORT (ROBUST CODE) USING WHILE 
//SORTING AN ARRAY IN ASCENDING ORDER
FOR j = 4 TO 1 Step -1
   alreadySorted = FALSE
   i = 0
   WHILE alreadySorted = FALSE OR i = j
     alreadySorted = TRUE
     i =  i + 1
     IF myARR[i] > myARR[i+1]
       THEN
         X = myARR[i]
         myARR[i] = myARR[i+1]
         myARR[i+1] = X
         alreadySorted = FALSE
     END IF
   END WHILE
   IF alreadySorted = TRUE THEN EXIT FOR
END FOR
 
//OUTPUT AN ARRAY
FOR i = 1 to 5
    OUTPUT myARR[i]
END FOR 